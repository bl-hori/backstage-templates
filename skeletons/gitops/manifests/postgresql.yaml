apiVersion: v1
kind: Secret
metadata:
  annotations:
    template.openshift.io/expose-database_name: '{.data[''database-name'']}'
    template.openshift.io/expose-password: '{.data[''database-password'']}'
    template.openshift.io/expose-username: '{.data[''database-user'']}'
    argocd.argoproj.io/sync-wave: "2"
  labels:
    template: postgresql-persistent-template
  name: postgresql
stringData:
  database-name: sampledb
  database-password: iIneiHICVqL51ywY
  database-user: user5TO
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    argocd.argoproj.io/sync-wave: "2"
  labels:
    template: postgresql-persistent-template
  name: postgresql
spec:
  ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    name: postgresql
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    template: postgresql-persistent-template
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  name: postgresql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  labels:
    backstage.io/kubernetes-id: ${{ values.repoName }}
    template: postgresql-persistent-template
  name: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      name: postgresql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: postgresql
    spec:
      containers:
        - env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: postgresql
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: postgresql
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: postgresql
          image: registry.redhat.io/rhel9/postgresql-15:1-54
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /usr/libexec/check-container
                - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
          name: postgresql
          ports:
            - containerPort: 5432
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: postgresql-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql